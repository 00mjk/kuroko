# Please avoid using double quotes or escape sequences
# in this file to allow it to be easily converted to C.
class set():
 def __init__(self, iter=[]):
  self._dict = {}
  self.__inrepr = 0
  for v in iter:
   self._dict[v] = 1
 def __contains__(self, v):
  return v in self._dict
 def __str__(self): return self.__repr__()
 def __repr__(self):
  if self.__inrepr: return '{}'
  let b='{'+', '.join([repr(k) for k in self._dict.keys()])+'}'
  self.__inrepr = 0
  return b
 def add(self,v):
  self._dict[v] = 1
 def __len__(self):
  return self._dict.__len__()
 def __iter__(self):
  return self._dict.keys().__iter__()
 def __or__(self, o):
  if not isinstance(o, set):
   raise TypeError()
  let b = set()
  for k in self:
   b.add(k)
  for k in o:
   b.add(k)
  return b
 def __and__(self, o):
  if not isinstance(o, set):
   raise TypeError()
  let b = set()
  for k in self:
   if k in o:
    b.add(k)
  return b

__builtins__.set = set

class Helper():
 '''You seem to already know how to use this.'''
 def __call__(self,obj=None):
  if obj is not None:
   try:
    print(obj.__doc__)
   except:
    try:
     print(obj.__class__.__doc__)
    except:
     print('No docstring avaialble for', obj)
  else:
   from help import interactive
   interactive()
 def __repr__(self):
  return 'Type help() for more help, or help(obj) to describe an object.'

let help = Helper()

class LicenseReader():
 def __call__(self):
  from help import __licenseText
  print(__licenseText)
 def __repr__(self):
  return 'Copyright 2020-2021 K. Lange <klange@toaruos.org>. Type `license()` for more information.'

let license = LicenseReader()

__builtins__.help = help
__builtins__.license = license

# this works because `kuroko` is always a built-in
import kuroko
kuroko.module_paths = ['./']
if 'executable_path' in dir(kuroko):
 let pathunits = kuroko.executable_path.split(kuroko.path_sep)[:-1]
 let dirname  = pathunits[-1]
 if dirname == 'bin':
  pathunits.pop(-1)
  pathunits.extend(['lib','kuroko',''])
 else:
  pathunits.extend(['modules',''])
 kuroko.module_paths.append(kuroko.path_sep.join(pathunits))

return object()
